// tslint:disable
/**
 * TODO
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Task
 */
export interface Task {
    /**
     * 
     * @type {string}
     * @memberof Task
     */
    title?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Task
     */
    done?: boolean;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {string}
     * @memberof User
     */
    name?: string;
    /**
     * 
     * @type {number}
     * @memberof User
     */
    age?: number;
}

/**
 * TasksApi - axios parameter creator
 * @export
 */
export const TasksApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of Task model
         * @summary Get all tasks
         * @param {string} [title] 
         * @param {boolean} [done] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tasksGet(title?: string, done?: boolean, options: any = {}): RequestArgs {
            const localVarPath = `/tasks`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (title !== undefined) {
                localVarQueryParameter['title'] = title;
            }

            if (done !== undefined) {
                localVarQueryParameter['done'] = done;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a Task
         * @summary Delete a Task
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tasksIdDelete(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling tasksIdDelete.');
            }
            const localVarPath = `/tasks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a single Task model
         * @summary Get Task by ID.
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tasksIdGet(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling tasksIdGet.');
            }
            const localVarPath = `/tasks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a Task
         * @summary Update a Task
         * @param {number} id 
         * @param {Task} [task] Task to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tasksIdPatch(id: number, task?: Task, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling tasksIdPatch.');
            }
            const localVarPath = `/tasks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof task !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(task !== undefined ? task : {}) : (task || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a Task
         * @summary Update a Task
         * @param {number} id 
         * @param {Task} [task] Task to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tasksIdPut(id: number, task?: Task, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling tasksIdPut.');
            }
            const localVarPath = `/tasks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof task !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(task !== undefined ? task : {}) : (task || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new Task
         * @summary Create a new Task
         * @param {Task} [task] Task to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tasksPost(task?: Task, options: any = {}): RequestArgs {
            const localVarPath = `/tasks`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof task !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(task !== undefined ? task : {}) : (task || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TasksApi - functional programming interface
 * @export
 */
export const TasksApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Returns an array of Task model
         * @summary Get all tasks
         * @param {string} [title] 
         * @param {boolean} [done] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tasksGet(title?: string, done?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Task>> {
            const localVarAxiosArgs = TasksApiAxiosParamCreator(configuration).tasksGet(title, done, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete a Task
         * @summary Delete a Task
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tasksIdDelete(id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = TasksApiAxiosParamCreator(configuration).tasksIdDelete(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns a single Task model
         * @summary Get Task by ID.
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tasksIdGet(id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Task>> {
            const localVarAxiosArgs = TasksApiAxiosParamCreator(configuration).tasksIdGet(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update a Task
         * @summary Update a Task
         * @param {number} id 
         * @param {Task} [task] Task to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tasksIdPatch(id: number, task?: Task, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = TasksApiAxiosParamCreator(configuration).tasksIdPatch(id, task, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update a Task
         * @summary Update a Task
         * @param {number} id 
         * @param {Task} [task] Task to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tasksIdPut(id: number, task?: Task, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = TasksApiAxiosParamCreator(configuration).tasksIdPut(id, task, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create a new Task
         * @summary Create a new Task
         * @param {Task} [task] Task to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tasksPost(task?: Task, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = TasksApiAxiosParamCreator(configuration).tasksPost(task, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * TasksApi - factory interface
 * @export
 */
export const TasksApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Returns an array of Task model
         * @summary Get all tasks
         * @param {string} [title] 
         * @param {boolean} [done] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tasksGet(title?: string, done?: boolean, options?: any) {
            return TasksApiFp(configuration).tasksGet(title, done, options)(axios, basePath);
        },
        /**
         * Delete a Task
         * @summary Delete a Task
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tasksIdDelete(id: number, options?: any) {
            return TasksApiFp(configuration).tasksIdDelete(id, options)(axios, basePath);
        },
        /**
         * Returns a single Task model
         * @summary Get Task by ID.
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tasksIdGet(id: number, options?: any) {
            return TasksApiFp(configuration).tasksIdGet(id, options)(axios, basePath);
        },
        /**
         * Update a Task
         * @summary Update a Task
         * @param {number} id 
         * @param {Task} [task] Task to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tasksIdPatch(id: number, task?: Task, options?: any) {
            return TasksApiFp(configuration).tasksIdPatch(id, task, options)(axios, basePath);
        },
        /**
         * Update a Task
         * @summary Update a Task
         * @param {number} id 
         * @param {Task} [task] Task to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tasksIdPut(id: number, task?: Task, options?: any) {
            return TasksApiFp(configuration).tasksIdPut(id, task, options)(axios, basePath);
        },
        /**
         * Create a new Task
         * @summary Create a new Task
         * @param {Task} [task] Task to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tasksPost(task?: Task, options?: any) {
            return TasksApiFp(configuration).tasksPost(task, options)(axios, basePath);
        },
    };
};

/**
 * TasksApi - object-oriented interface
 * @export
 * @class TasksApi
 * @extends {BaseAPI}
 */
export class TasksApi extends BaseAPI {
    /**
     * Returns an array of Task model
     * @summary Get all tasks
     * @param {string} [title] 
     * @param {boolean} [done] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApi
     */
    public tasksGet(title?: string, done?: boolean, options?: any) {
        return TasksApiFp(this.configuration).tasksGet(title, done, options)(this.axios, this.basePath);
    }

    /**
     * Delete a Task
     * @summary Delete a Task
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApi
     */
    public tasksIdDelete(id: number, options?: any) {
        return TasksApiFp(this.configuration).tasksIdDelete(id, options)(this.axios, this.basePath);
    }

    /**
     * Returns a single Task model
     * @summary Get Task by ID.
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApi
     */
    public tasksIdGet(id: number, options?: any) {
        return TasksApiFp(this.configuration).tasksIdGet(id, options)(this.axios, this.basePath);
    }

    /**
     * Update a Task
     * @summary Update a Task
     * @param {number} id 
     * @param {Task} [task] Task to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApi
     */
    public tasksIdPatch(id: number, task?: Task, options?: any) {
        return TasksApiFp(this.configuration).tasksIdPatch(id, task, options)(this.axios, this.basePath);
    }

    /**
     * Update a Task
     * @summary Update a Task
     * @param {number} id 
     * @param {Task} [task] Task to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApi
     */
    public tasksIdPut(id: number, task?: Task, options?: any) {
        return TasksApiFp(this.configuration).tasksIdPut(id, task, options)(this.axios, this.basePath);
    }

    /**
     * Create a new Task
     * @summary Create a new Task
     * @param {Task} [task] Task to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApi
     */
    public tasksPost(task?: Task, options?: any) {
        return TasksApiFp(this.configuration).tasksPost(task, options)(this.axios, this.basePath);
    }

}


/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of User model
         * @summary Get all users
         * @param {string} [name] 
         * @param {number} [age] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersGet(name?: string, age?: number, options: any = {}): RequestArgs {
            const localVarPath = `/users`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (age !== undefined) {
                localVarQueryParameter['age'] = age;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a User
         * @summary Delete a User
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersIdDelete(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling usersIdDelete.');
            }
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a single User model
         * @summary Get User by ID.
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersIdGet(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling usersIdGet.');
            }
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a User
         * @summary Update a User
         * @param {number} id 
         * @param {User} [user] User to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersIdPatch(id: number, user?: User, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling usersIdPatch.');
            }
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof user !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(user !== undefined ? user : {}) : (user || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a User
         * @summary Update a User
         * @param {number} id 
         * @param {User} [user] User to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersIdPut(id: number, user?: User, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling usersIdPut.');
            }
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof user !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(user !== undefined ? user : {}) : (user || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new User
         * @summary Create a new User
         * @param {User} [user] User to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersPost(user?: User, options: any = {}): RequestArgs {
            const localVarPath = `/users`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof user !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(user !== undefined ? user : {}) : (user || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Returns an array of User model
         * @summary Get all users
         * @param {string} [name] 
         * @param {number} [age] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersGet(name?: string, age?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>> {
            const localVarAxiosArgs = UsersApiAxiosParamCreator(configuration).usersGet(name, age, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete a User
         * @summary Delete a User
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersIdDelete(id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = UsersApiAxiosParamCreator(configuration).usersIdDelete(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns a single User model
         * @summary Get User by ID.
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersIdGet(id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>> {
            const localVarAxiosArgs = UsersApiAxiosParamCreator(configuration).usersIdGet(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update a User
         * @summary Update a User
         * @param {number} id 
         * @param {User} [user] User to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersIdPatch(id: number, user?: User, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = UsersApiAxiosParamCreator(configuration).usersIdPatch(id, user, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update a User
         * @summary Update a User
         * @param {number} id 
         * @param {User} [user] User to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersIdPut(id: number, user?: User, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = UsersApiAxiosParamCreator(configuration).usersIdPut(id, user, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create a new User
         * @summary Create a new User
         * @param {User} [user] User to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersPost(user?: User, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = UsersApiAxiosParamCreator(configuration).usersPost(user, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Returns an array of User model
         * @summary Get all users
         * @param {string} [name] 
         * @param {number} [age] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersGet(name?: string, age?: number, options?: any) {
            return UsersApiFp(configuration).usersGet(name, age, options)(axios, basePath);
        },
        /**
         * Delete a User
         * @summary Delete a User
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersIdDelete(id: number, options?: any) {
            return UsersApiFp(configuration).usersIdDelete(id, options)(axios, basePath);
        },
        /**
         * Returns a single User model
         * @summary Get User by ID.
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersIdGet(id: number, options?: any) {
            return UsersApiFp(configuration).usersIdGet(id, options)(axios, basePath);
        },
        /**
         * Update a User
         * @summary Update a User
         * @param {number} id 
         * @param {User} [user] User to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersIdPatch(id: number, user?: User, options?: any) {
            return UsersApiFp(configuration).usersIdPatch(id, user, options)(axios, basePath);
        },
        /**
         * Update a User
         * @summary Update a User
         * @param {number} id 
         * @param {User} [user] User to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersIdPut(id: number, user?: User, options?: any) {
            return UsersApiFp(configuration).usersIdPut(id, user, options)(axios, basePath);
        },
        /**
         * Create a new User
         * @summary Create a new User
         * @param {User} [user] User to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersPost(user?: User, options?: any) {
            return UsersApiFp(configuration).usersPost(user, options)(axios, basePath);
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * Returns an array of User model
     * @summary Get all users
     * @param {string} [name] 
     * @param {number} [age] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersGet(name?: string, age?: number, options?: any) {
        return UsersApiFp(this.configuration).usersGet(name, age, options)(this.axios, this.basePath);
    }

    /**
     * Delete a User
     * @summary Delete a User
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersIdDelete(id: number, options?: any) {
        return UsersApiFp(this.configuration).usersIdDelete(id, options)(this.axios, this.basePath);
    }

    /**
     * Returns a single User model
     * @summary Get User by ID.
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersIdGet(id: number, options?: any) {
        return UsersApiFp(this.configuration).usersIdGet(id, options)(this.axios, this.basePath);
    }

    /**
     * Update a User
     * @summary Update a User
     * @param {number} id 
     * @param {User} [user] User to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersIdPatch(id: number, user?: User, options?: any) {
        return UsersApiFp(this.configuration).usersIdPatch(id, user, options)(this.axios, this.basePath);
    }

    /**
     * Update a User
     * @summary Update a User
     * @param {number} id 
     * @param {User} [user] User to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersIdPut(id: number, user?: User, options?: any) {
        return UsersApiFp(this.configuration).usersIdPut(id, user, options)(this.axios, this.basePath);
    }

    /**
     * Create a new User
     * @summary Create a new User
     * @param {User} [user] User to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersPost(user?: User, options?: any) {
        return UsersApiFp(this.configuration).usersPost(user, options)(this.axios, this.basePath);
    }

}


